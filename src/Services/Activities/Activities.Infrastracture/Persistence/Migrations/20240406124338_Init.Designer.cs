// <auto-generated />
using System;
using Activities.Infrastracture.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Activities.Infrastracture.Persistence.Migrations
{
    [DbContext(typeof(ServiceDbContext))]
    [Migration("20240406124338_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Activities.Domain.Aggregates.Activities.ActivityAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AverageCadence")
                        .HasColumnType("real");

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("Kilojoules")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<int>("SportType")
                        .HasColumnType("int");

                    b.Property<long>("StravaId")
                        .HasColumnType("bigint");

                    b.Property<long>("StravaUserId")
                        .HasColumnType("bigint");

                    b.Property<float>("TotalElevationGain")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("StravaId")
                        .IsUnique();

                    b.HasIndex("StravaUserId");

                    b.ToTable("Activities", (string)null);
                });

            modelBuilder.Entity("Activities.Domain.Aggregates.Activities.ActivityAggregate", b =>
                {
                    b.OwnsOne("Activities.Domain.Aggregates.Activities.ValueObjects.Heartrate", "Heartrate", b1 =>
                        {
                            b1.Property<Guid>("ActivityAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("AverageHeartrate")
                                .HasColumnType("real")
                                .HasColumnName("AverageHeartrate");

                            b1.Property<bool>("HasHeartrate")
                                .HasColumnType("bit")
                                .HasColumnName("HasHeartrate");

                            b1.Property<float>("MaxHeartrate")
                                .HasColumnType("real")
                                .HasColumnName("MaxHeartrate");

                            b1.HasKey("ActivityAggregateId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityAggregateId");
                        });

                    b.OwnsOne("Activities.Domain.Aggregates.Activities.ValueObjects.Map", "Map", b1 =>
                        {
                            b1.Property<Guid>("ActivityAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Polyline")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Polyline");

                            b1.Property<string>("SummaryPolyline")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SummaryPolyline");

                            b1.HasKey("ActivityAggregateId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityAggregateId");

                            b1.OwnsOne("Common.Domain.Models.LatLng", "EndLatlng", b2 =>
                                {
                                    b2.Property<Guid>("MapActivityAggregateId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<float>("Latitude")
                                        .HasColumnType("real")
                                        .HasColumnName("EndLat");

                                    b2.Property<float>("Longitude")
                                        .HasColumnType("real")
                                        .HasColumnName("EndLng");

                                    b2.HasKey("MapActivityAggregateId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MapActivityAggregateId");
                                });

                            b1.OwnsOne("Common.Domain.Models.LatLng", "StartLatlng", b2 =>
                                {
                                    b2.Property<Guid>("MapActivityAggregateId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<float>("Latitude")
                                        .HasColumnType("real")
                                        .HasColumnName("StartLat");

                                    b2.Property<float>("Longitude")
                                        .HasColumnType("real")
                                        .HasColumnName("StartLng");

                                    b2.HasKey("MapActivityAggregateId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MapActivityAggregateId");
                                });

                            b1.Navigation("EndLatlng");

                            b1.Navigation("StartLatlng");
                        });

                    b.OwnsOne("Activities.Domain.Aggregates.Activities.ValueObjects.Speed", "Speed", b1 =>
                        {
                            b1.Property<Guid>("ActivityAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("AverageSpeed")
                                .HasColumnType("real")
                                .HasColumnName("AverageSpeed");

                            b1.Property<float>("MaxSpeed")
                                .HasColumnType("real")
                                .HasColumnName("MaxSpeed");

                            b1.HasKey("ActivityAggregateId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityAggregateId");
                        });

                    b.OwnsOne("Activities.Domain.Aggregates.Activities.ValueObjects.Time", "Time", b1 =>
                        {
                            b1.Property<Guid>("ActivityAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("ElapsedTime")
                                .HasColumnType("int")
                                .HasColumnName("ElapsedTime");

                            b1.Property<int>("MovingTime")
                                .HasColumnType("int")
                                .HasColumnName("MovingTime");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartDate");

                            b1.Property<DateTime>("StartDateLocal")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartDateLocal");

                            b1.HasKey("ActivityAggregateId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityAggregateId");
                        });

                    b.OwnsOne("Activities.Domain.Aggregates.Activities.ValueObjects.Watts", "Watts", b1 =>
                        {
                            b1.Property<Guid>("ActivityAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("AverageWatts")
                                .HasColumnType("real")
                                .HasColumnName("AverageWatts");

                            b1.Property<bool>("DeviceWatts")
                                .HasColumnType("bit")
                                .HasColumnName("DeviceWatts");

                            b1.Property<int>("MaxWatts")
                                .HasColumnType("int")
                                .HasColumnName("MaxWatts");

                            b1.HasKey("ActivityAggregateId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityAggregateId");
                        });

                    b.Navigation("Heartrate")
                        .IsRequired();

                    b.Navigation("Map")
                        .IsRequired();

                    b.Navigation("Speed")
                        .IsRequired();

                    b.Navigation("Time")
                        .IsRequired();

                    b.Navigation("Watts")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
